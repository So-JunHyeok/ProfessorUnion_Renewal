<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd">
		


	    <sec:http auto-config="true" pattern="/resources/**" security="none"/>
	
	<sec:http auto-config="true" use-expressions="true">
		 <sec:intercept-url pattern="/user/**" access="permitAll" />
		 <sec:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/>
		 <sec:intercept-url pattern="/agony/**" access="hasRole('ROLE_USER','ROLE_UNIONMEMBER','ROLE_employees','ROLE_ADMIN')"/>
		 <sec:intercept-url pattern="/board/**" access="hasRole('ROLE_USER','ROLE_UNIONMEMBER','ROLE_employees','ROLE_ADMIN')"/>
		  
		
		
		 <sec:form-login 
			login-page="/loginForm"
			login-processing-url="/main.nhn"
			default-target-url="/main.nhn"
			always-use-default-target="true"
			username-parameter="l_Id"
			password-parameter="l_Pw"
			authentication-success-handler-ref="userLoginSuccessHandler"
			authentication-failure-handler-ref="userLoginFailureHandler"
			authentication-failure-url="/register"
			/>
		 <sec:logout 
			logout-url="/logout" 
			logout-success-url="/loginForm"
			delete-cookies="true" 
			invalidate-session="true"
			/>
		 <sec:session-management invalid-session-url="/main.nhn">
		 	<sec:concurrency-control max-sessions="1" expired-url="/main.nhn"/>
		 </sec:session-management>
		 <csrf disabled="true"/>
		 <!-- ckeditor 설정 부분 -->
		 <!-- 여기까지 -->
	</sec:http>
	
	
	<beans:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
		<beans:constructor-arg name="strength" value="256"/>
	</beans:bean>
	
	<beans:bean id="userService" class="com.kpu.professorunion.dao.LoginAuthenticationService">

	</beans:bean>
	
	<sec:authentication-manager>
		<sec:authentication-provider user-service-ref="userService">
			<sec:password-encoder ref="passwordEncoder">
				<sec:salt-source user-property="username"/>
			</sec:password-encoder>
		</sec:authentication-provider>
	</sec:authentication-manager>
	
	<context:component-scan base-package="com.kpu.professorunion.dao" />

	<!-- 
				<form-login>
		login-page="로그인할 페이지"
		username-parameter="ID로사용할 input name값"
		password-parameter="PW로사용할 input name값"
		default-target-url="로그인 성공 후 호출할 주소"
		authentication-failure-url="로그인 실패 후 호출할 주소"
	 -->
	 
	 <!-- 
				<logout>
		logout-url = "로그아웃이 요청될 url"
		logout-success-url= "로그아웃이 성공 후 이동할 주소"
		delete-cookies = "쿠키 삭제 여부"
		invalidate-session = "세션 삭제 여부"
	 -->
	 
	 <!-- 
	 		<session-management>
	 	invalid-session-url="세션이 끊겼을 때 이동 할 주소"
	 	session-fixation-protection="migrateSession, none, newSession"
	 	[Session Fixation]을 이용한 악성 사용자를 막기 위해 security에서 매번 인증 요청시마다 session을 재생성 하는데 이를 제어하기 위한 속성이다.
	 	( 악성 사용자 가 사이트에 접속하여 세션 ID 를 획득 후 획득 한 세션 ID를 사용하여
	 		다른 사용자가 사이트에 접속하도록 유도하여 다른 사용자가 해당 세션 ID로 사이트 접속시
	 		악성 사용자도 같은 세션으로 함께 로그인이 되는 방법​ )
	 		<concurrency-control>
	 		max-sessions="중복 로그인 가능한 세션 수"
	 		expired-url="중복 로그인 발생시, 이동 할 주소 (먼저 로그인한 세션이 종료)"(invalid-session-url을 정의했으면 invalid-session-url로 이동)​
	  -->
	  
	  
	  	<!-- 
			<csrf disabled="true">
	
		Spring Security 3.2 부터는 CSRF 공격에 대한 방어기능을 제공해주고있다.
	
		CSRF공격은 한번 인증된 세션정보를 가지고 악의적인 목적을 가진 동일하게 구성된 페이지로 요청을 보내는 것인데
		즉 은행사이트의 경우를 가정한다면
		사용자가 은행사이트에 로그인 한 뒤 로그아웃 하지않고 다른 웹사이트를 들어갔는데 그 사이트의 HTML코드가 은행의 페이지와 동일할 경우 사용자 의도와는 다르게 다른 사람에게 송금될수 있다는것이다.
		은행서버입장에서는 요청폼이 올바른 폼인지 아니면 다른곳에서 만들어진 폼인지 구분할 수 있는 고유값이 필요한데
		그 대안중 하나가 Syncronized Token 패턴이다.
		이 방법은 모든 요청에 세션 쿠키와 더불어 랜덤하게 생성되는 토큰을 HTTP 파라미터로 제공하는방법이다.
		Spring Security는 CSRF공격을 막기위해 랜덤토큰인증방식을 제공해주고 있는것이다.
	 -->
	
	<beans:bean id="userLoginSuccessHandler"
	class="com.kpu.professorunion.service.UserLoginSuccessHandler"/>
	<beans:bean id="userLoginFailureHandler"
	class="com.kpu.professorunion.service.UserLoginFailureHandler"/>
	
	

   

</beans:beans>